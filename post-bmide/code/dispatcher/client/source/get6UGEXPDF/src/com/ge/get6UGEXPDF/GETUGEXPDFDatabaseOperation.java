/* STARTFILEDOC ***
//   ===========================================================================
//   Filename:   GETNXPDFDatabaseOperation.java
//   Purpose : Database Operation Class for importing the 3D PDF generated by ACS 
//                 into Teamcenter and push the workflow process to subsequent task 
//
//    History:
//      Who                           Date                 Description
//  Capgemini Development Team     15 May, 2017         Initial creation
//
//   ============================================================================
*/
package com.ge.get6UGEXPDF;

import com.ge.GETCommon;
import com.teamcenter.ets.load.DefaultDatabaseOperation;
import com.teamcenter.ets.request.TranslationRequest;
import com.teamcenter.ets.soa.SoaHelper;
import com.teamcenter.soa.client.FileManagementUtility;
import com.teamcenter.soa.client.model.ModelObject;
import com.teamcenter.soa.client.model.strong.Dataset;
import com.teamcenter.services.strong.core.DataManagementService;
import com.teamcenter.services.strong.workflow.WorkflowService;
import com.teamcenter.soa.client.model.ServiceData;
import com.teamcenter.services.strong.workflow._2014_06.Workflow.PerformActionInputInfo;
import com.teamcenter.services.strong.workflow._2008_06.Workflow.AttachmentInfo;
import com.teamcenter.services.strong.core._2006_03.DataManagement.CreateDatasetsResponse;
import com.teamcenter.services.strong.core._2006_03.DataManagement.ObjectOwner;
import com.teamcenter.services.loose.core._2006_03.FileManagement.DatasetFileInfo;
import com.teamcenter.services.loose.core._2006_03.FileManagement.GetDatasetWriteTicketsInputData;
import com.teamcenter.services.strong.core._2008_06.DataManagement;
import com.teamcenter.soa.client.model.strong.DispatcherRequest;
import com.teamcenter.soa.client.model.strong.EPMConditionTask;
import com.teamcenter.soa.client.model.strong.EPMTask;
import com.teamcenter.soa.client.model.strong.Group;
import com.teamcenter.soa.client.model.strong.ItemRevision;
import com.teamcenter.soa.client.model.strong.User;
import com.teamcenter.translationservice.task.TranslationDBMapInfo;
import com.teamcenter.translationservice.task.TranslationSrcInfo;
import com.teamcenter.translationservice.task.TranslationTaskUtil;
import com.teamcenter.ets.util.DataSetHelper;
import java.io.File;
import java.io.FileNotFoundException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.ArrayList;
import java.util.List;
/**
 * This custom class is a sub class of the base DatabaseOperation class which
 * performs the loading operation related to getting the file lists from the
 * Mapper Objects. The main advantage of this class is derived classes do not
 * have to understand the mapping logic.
 *
 * @author Capgemini Development Team
 */

public class GETUGEXPDFDatabaseOperation extends DefaultDatabaseOperation {
    
    protected List<String> noResultFileList;
    protected DataSetHelper zDtSetHelper;
    
    private static final String PDF_FILE_EXT = ".pdf";
    private static final String anarkDatasetSuffix = "_3D_PDF";
    private static final String logFileSuffix = "_Log";
    private static final String pdffileMapperKey = "pdffile";
    private static final String pdffiledescMapperKey = "reportDesc";
    private static final String anarklogfileMapperKey = "anarklogfile";
    private static final String anarklogDescMapperKey = "anarklogDesc";
    private static final String logfileMapperKey = "logfile";
    private static final String logDescMapperKey = "logDesc";
    
    private FileManagementUtility fileManagementUtility = new FileManagementUtility(SoaHelper.getSoaConnection());;
    /**
     * load method
     */
    public void load() throws Exception {
    
        TranslationSrcInfo zSrcInfo = this.transData.getTranslationSrcInfo();
        if (zSrcInfo != null) {
            this.m_zTaskLogger.info("TranslationSrcInfo:");
            this.m_zTaskLogger.info("   Item Id = " + TranslationTaskUtil.getUserAttrValue(zSrcInfo, GETCommon.itemidAttr).get(0));
            this.m_zTaskLogger
                    .info("   Revision Id = " + TranslationTaskUtil.getUserAttrValue(zSrcInfo, GETCommon.revisionidAttr).get(0));
        }

        TranslationDBMapInfo zDbMapInfo = this.transData.getTranslationDBMapInfo();

        if (zDbMapInfo != null) {
            this.zDtSetHelper = new DataSetHelper(this.m_zTaskLogger, this.updateExistingVisData,
                    this.softFailureHandlingEnabled);

            List<String> pdfFiles = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, pdffileMapperKey));

            List<String> reportDesc = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, pdffiledescMapperKey));

            String reportFileName = (String) pdfFiles.get(0);
            String scResultFileFullPath = this.m_scResultDir + File.separator + reportFileName;

            File resultFile = new File(scResultFileFullPath);
            if (resultFile.exists()) {
                load(reportFileName, scResultFileFullPath, (String) reportDesc.get(0));
            }else
            {
                // request failed, retrieve the logs and attach to workflow process as a reference
                
                EPMConditionTask conditionTask = null;

                m_zTaskLogger.debug("Entering GETNXPDFDatabaseOperation.completeWFConditionTask method ...");

                DataManagementService dmService = DataManagementService.getService(SoaHelper.getSoaConnection());
                ItemRevision sourceRevision = (ItemRevision) secondaryObj;
                ModelObject[] tasks = sourceRevision.get_process_stage_list();
                if (tasks != null & tasks.length > 0)
                {
                    dmService.getProperties(tasks, new String[]{GETCommon.rootTargetAttachmentsAttr, GETCommon.creationDateAttr, GETCommon.rootTaskAttr});

                    for (ModelObject taskObject : tasks)
                    {
                        if (!(taskObject instanceof EPMConditionTask))
                        {
                            continue;
                        }

                        m_zTaskLogger.info("Got the EPM Condition Task Instance");

                        conditionTask = (EPMConditionTask) taskObject;
                        //Attach the log files to current workflow reference if the Translation request failed
                        processLogs(conditionTask);
                    }
                }
            }
        }
    }
    /**
     * Pre load method to check and keep the report file name within 132 characters
     */
    public void loadPre() throws Exception {
        super.loadPre();

        TranslationDBMapInfo zDbMapInfo = this.transData.getTranslationDBMapInfo();
        if (zDbMapInfo != null) {
            List<String> pdfFiles = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, pdffileMapperKey));
            String reportFileName = (String) pdfFiles.get(0);

            if (reportFileName.length() > 132) {
                reportFileName = reportFileName.substring(0, 128) + PDF_FILE_EXT;
            }

            String taskID = this.transTask.getId();
            String currentReportFileName = taskID + PDF_FILE_EXT;
            String currentReportFilePath = this.m_scResultDir.concat(File.separator).concat(currentReportFileName);
            String newReportFilePAth = this.m_scResultDir.concat(File.separator).concat(reportFileName);
            File currentReportFile = new File(currentReportFilePath);
            currentReportFile.renameTo(new File(newReportFilePAth));
        }
    }

    /**
     * Method to load the 3D PDF and attach it as a dataset
     *
     * @throws Exception
     */
    protected void load(String reportName, String reportFilePath, String reportDesc) throws Exception {
        TranslationSrcInfo zSrcInfo = this.transData.getTranslationSrcInfo();
        ItemRevision sourceItemRevision = (ItemRevision) this.secondaryObj;
        String reportDatasetType = GETCommon.pdfDatasetType;
        String pdfDatasetReference = GETCommon.pdfreferenceType;

        String[] pdf_report_relation = { GETCommon.imanmanifestationRelType };

        DataManagementService dmServ = DataManagementService.getService(SoaHelper.getSoaConnection());

        ModelObject[] revObj = { sourceItemRevision };
        String[] revProps = new String[1];
        revProps[0] = pdf_report_relation[0];
        dmServ.getProperties(revObj, revProps);

        Dataset dataset = null;
        DataManagement.DatasetProperties2 props = new DataManagement.DatasetProperties2();
        props.clientId = reportName;
        props.type = reportDatasetType;
        props.name = (String) TranslationTaskUtil.getUserAttrValue(zSrcInfo, GETCommon.itemidAttr).get(0) + "_" + TranslationTaskUtil.getUserAttrValue(zSrcInfo, GETCommon.revisionidAttr).get(0) + anarkDatasetSuffix;
        props.description = reportDesc;

        DataManagement.DatasetProperties2[] currProps = { props };

        DataManagementService dmService = DataManagementService.getService(SoaHelper.getSoaConnection());
        CreateDatasetsResponse resp = dmService.createDatasets2(currProps);

        dataset = resp.output[0].dataset;

        ModelObject[] datasetObjArr = { dataset };
        String[] datasetProps = new String[1];
        datasetProps[0] = GETCommon.objectNameAttr;
        dmServ.getProperties(datasetObjArr, datasetProps);

        List<String> fileList = new ArrayList<String>();
        fileList.add(reportName);

        changeDatasetOwnership(dataset);
        this.zDtSetHelper.createInsertDataset(sourceItemRevision, dataset, reportDatasetType, pdf_report_relation[0],
                pdfDatasetReference, this.m_scResultDir, fileList, false);
    }

    /**
     * Method to process non available result files post load process and call the Workflow completion method
     *
     * @throws Exception
     */
    public void processTaskPost() throws Exception {
        if ((this.noResultFileList != null) && (!this.noResultFileList.isEmpty())) {
            this.m_zTaskLogger.debug("The following Result files were not found while loading");
            for (int i = 0; i < this.noResultFileList.size(); i++) {
                this.m_zTaskLogger.debug((String) this.noResultFileList.get(i));
            }
            this.noResultFileList.clear();
            throw new FileNotFoundException("No result file found at " + this.m_scResultDir);
        }
        
        // Complete the current WF task and move it ahead
        completeWFConditionTask();
    }

    
    /**
     * Method to process dispatcher requests and complete the current Workflow condition task
     *
     * @throws Exception
     */
    private void completeWFConditionTask() throws Exception
    {
        boolean isSuccessPath = true;

        int nCompletedRequests = 0;
        int nTotalRequests = 0;

        List<ModelObject> propertyList = new ArrayList<ModelObject>();

        StringBuilder itemIDBuilder = new StringBuilder();
        StringBuilder revIDBuilder = new StringBuilder();

        EPMConditionTask conditionTask = null;

        m_zTaskLogger.debug("Entering GETNXPDFDatabaseOperation.completeWFConditionTask method ...");

        DataManagementService dmService = DataManagementService.getService(SoaHelper.getSoaConnection());
        ItemRevision sourceRevision = (ItemRevision) secondaryObj;
        ModelObject[] tasks = sourceRevision.get_process_stage_list();
        if (tasks != null & tasks.length > 0)
        {
            dmService.getProperties(tasks, new String[]{GETCommon.rootTargetAttachmentsAttr, GETCommon.creationDateAttr, GETCommon.rootTaskAttr});

            for (ModelObject taskObject : tasks)
            {
                if (!(taskObject instanceof EPMConditionTask))
                {
                    continue;
                }

                m_zTaskLogger.info("Got the EPM Condition Task Instance");

                conditionTask = (EPMConditionTask) taskObject;
                ModelObject[] targetAttachments = conditionTask.get_root_target_attachments();
                if (targetAttachments != null && targetAttachments.length > 0)
                {
                    for (ModelObject targetAttachment : targetAttachments)
                    {
                        if (targetAttachment.equals(secondaryObj))
                        {
                            continue;
                        }
                        if (!(targetAttachment instanceof ItemRevision))
                        {
                            continue;
                        }
                        ItemRevision targetRevision = (ItemRevision) targetAttachment;
                        if (!targetRevision.get_object_type().equals(GETCommon.mechPartRevisionType) &&
                            !targetRevision.get_object_type().equals(GETCommon.electPartRevisionType))
                        {
                            continue;
                        }
                        m_zTaskLogger.info("The Secondary Object Type is : " + targetRevision.get_object_type());
                        itemIDBuilder.append(targetRevision.get_item_id()).append(GETCommon.SEMICOLON);
                        revIDBuilder.append(targetRevision.get_item_revision_id()).append(GETCommon.SEMICOLON);
                    }
                }
                break;
            }
        }

        String itemIDString = itemIDBuilder.toString();
        if (!itemIDString.isEmpty())
        {
            String revIDString = revIDBuilder.toString();
            Calendar creationDate = ((EPMTask)conditionTask.get_root_task()).get_creation_date();
            SimpleDateFormat dateFormat = new SimpleDateFormat(GETCommon.teamcenterDateFormat);
            String creationDateString = dateFormat.format(creationDate.getTime());

            ModelObject[] dispRequestsList = GETCommon.queryObject(GETCommon.dispatcherQueryName,
                    new String[]{GETCommon.queryIDEntry, GETCommon.queryRevisionEntry, GETCommon.queryCreatedAfterEntry},
                    new String[]{itemIDString, revIDString, creationDateString});
            if (dispRequestsList != null && dispRequestsList.length > 0)
            {
                for (ModelObject mo : dispRequestsList)
                {
                    propertyList.add(mo);   
                }
            }
            propertyList.add(request);
            dmService.getProperties(propertyList.toArray(new ModelObject[propertyList.size()]), new String[]{GETCommon.currentStateAttr, GETCommon.taskIDAttr, GETCommon.providerNameAttr, GETCommon.serviceNameAttr});

            if (dispRequestsList != null && dispRequestsList.length > 0)
            {
                m_zTaskLogger.info("The number of dispatcher requests found from the search is : " + dispRequestsList.length);

                nTotalRequests = dispRequestsList.length;
                for (ModelObject dispRequest : dispRequestsList)
                {
                    String currentState = ((DispatcherRequest)dispRequest).get_currentState();
                    if (currentState.equalsIgnoreCase(GETCommon.dispatcherCompleteState) ||
                        currentState.equalsIgnoreCase(GETCommon.dispatcherDuplicateState) ||
                        currentState.equalsIgnoreCase(GETCommon.dispatcherDeleteState) ||
                        currentState.equalsIgnoreCase(GETCommon.dispatcherCancelledState) ||
                        currentState.equalsIgnoreCase(GETCommon.dispatcherSupersededState) ||
                        currentState.equalsIgnoreCase(GETCommon.dispatcherNoTransState) ||
                        currentState.equalsIgnoreCase(GETCommon.dispatcherTerminalState))
                    {
                        nCompletedRequests++;
                    }

                    // To check if dispatcher request is Terminal.
                    if (TranslationRequest.isInTerminalState(dispRequest) || currentState.equalsIgnoreCase(GETCommon.dispatcherNoTransState))
                    {
                        isSuccessPath = false;
                    }
                }
            }
        }
        else
        {
            m_zTaskLogger.info("No other WF Targets found");
        }

        if (propertyList.size() == 0)
        {
            dmService.getProperties(propertyList.toArray(new ModelObject[]{request}), new String[]{GETCommon.currentStateAttr, GETCommon.taskIDAttr, GETCommon.providerNameAttr, GETCommon.serviceNameAttr});
        }

        if (nCompletedRequests == nTotalRequests)
        {
            m_zTaskLogger.info("Reached the final Dispatcher Request");

            String currentState = ((DispatcherRequest)request).get_currentState();
            if (TranslationRequest.isInTerminalState(request) || currentState.equalsIgnoreCase(GETCommon.dispatcherNoTransState))
            {
                isSuccessPath = false;
            }

            String result = isSuccessPath ? GETCommon.successResult : GETCommon.failureResult;
            m_zTaskLogger.info("The result to be set is : " + result);

            // Complete the current task of the workflow
            WorkflowService workflowService = WorkflowService.getService(SoaHelper.getSoaConnection());
            PerformActionInputInfo inputInfo = new PerformActionInputInfo();
            inputInfo.action = GETCommon.EPMCompleteAction;
            inputInfo.actionableObject = conditionTask;
            inputInfo.clientId = ((DispatcherRequest)request).get_taskID();
            inputInfo.supportingValue = result;
            ServiceData serviceData = workflowService.performAction3(new PerformActionInputInfo[]{inputInfo});
            String errorMessage = GETCommon.getErrorFromServiceData(serviceData);
            if (errorMessage != null)
            {
                throw new Exception(errorMessage);
            }
            m_zTaskLogger.info("Completed the condition task and moved it to the next level");
        }

        m_zTaskLogger.debug("Exiting GETNXPDFDatabaseOperation.completeWFConditionTask method ...");
    }
    /**
     * Method to process log files generated by the Anark Core Server and Dispatcher Service
     *
     * @throws Exception
     */
    private void processLogs(EPMConditionTask conditionTask) throws Exception
    {
        TranslationDBMapInfo zDbMapInfo = this.transData.getTranslationDBMapInfo();
        if (zDbMapInfo != null) {
            List<String> anarklogFiles = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, anarklogfileMapperKey));
            List<String> anarklogDesc = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, anarklogDescMapperKey));
            
            List<String> logFiles = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, logfileMapperKey));
            List<String> logDesc = castList(String.class, TranslationTaskUtil.getMapperResults(zDbMapInfo, logDescMapperKey));
            
            if (anarklogFiles != null && anarklogFiles.size() > 0)
            {
                for (String anarklogFileName : anarklogFiles)
                {
                    File anarkresultFile = new File(anarklogFileName);
                    if (anarkresultFile.exists()) {
                        attachLogs(conditionTask, anarklogFileName, anarklogFileName, (String) anarklogDesc.get(0));
                    } else {
                        m_zTaskLogger.info("No Anark log file found at " + anarklogFileName);
                    }
                }
            }
            
            if (logFiles != null && logFiles.size() > 0)
            {
                for (String logFileName : logFiles)
                {
                    File logresultFile = new File(logFileName);
                    if (logresultFile.exists()) {
                        attachLogs(conditionTask, logFileName, logFileName, (String) logDesc.get(0));
                    } else {
                        m_zTaskLogger.info("No Dispatcher log file found at " + logFileName);
                    }
                }
            }
        }
    }
    /**
     * Method to attach log files generated by the Anark Core Server and Dispatcher Service to Workflow Reference
     *
     * @throws Exception
     */
    private void attachLogs(EPMConditionTask conditionTask, String reportName, String reportFilePath, String reportDesc) throws Exception
    {
        TranslationSrcInfo zSrcInfo = this.transData.getTranslationSrcInfo();
        String DatasetType = GETCommon.textDatasetType;

        Dataset dataset = null;
        DataManagement.DatasetProperties2 props = new DataManagement.DatasetProperties2();
        props.clientId = reportName;
        props.type = DatasetType;
        props.name = (String) TranslationTaskUtil.getUserAttrValue(zSrcInfo, GETCommon.itemidAttr).get(0) + "_" + TranslationTaskUtil.getUserAttrValue(zSrcInfo, GETCommon.revisionidAttr).get(0) + logFileSuffix;
        props.description = reportDesc;

        DataManagement.DatasetProperties2[] currProps = { props };

        DataManagementService dmService = DataManagementService.getService(SoaHelper.getSoaConnection());
        CreateDatasetsResponse resp = dmService.createDatasets2(currProps);

        dataset = resp.output[0].dataset;
        DatasetFileInfo fileInfo = new DatasetFileInfo();
        DatasetFileInfo[] fileInfos = new DatasetFileInfo[1];

        fileInfo.clientId = "fileInfo";
        fileInfo.allowReplace = true;
        fileInfo.fileName = reportFilePath;
        fileInfo.isText = true;
        fileInfo.namedReferencedName = GETCommon.textnamedrefName;
        fileInfos[0] = fileInfo;

        GetDatasetWriteTicketsInputData input = new GetDatasetWriteTicketsInputData();
        input.createNewVersion = true;
        input.dataset = dataset;
        input.datasetFileInfos=fileInfos;
        
        GetDatasetWriteTicketsInputData[] inputs  = new GetDatasetWriteTicketsInputData[] { input };
        fileManagementUtility.putFiles(inputs);
        
        EPMTask rootTask = (EPMTask)(conditionTask.get_root_task());
        WorkflowService workflowService = WorkflowService.getService(SoaHelper.getSoaConnection());
        
        AttachmentInfo attachInfo = new AttachmentInfo();
        attachInfo.attachment = new ModelObject[]{dataset};
        attachInfo.attachmentType = new int[]{3};

        ServiceData serviceData = workflowService.addAttachments(rootTask,attachInfo);

        String errorMessage = GETCommon.getErrorFromServiceData(serviceData);
        if (errorMessage != null)
        {
            throw new Exception(errorMessage);
        }
        m_zTaskLogger.info("Added the log file " +reportName+ " to process reference");
    }
    
    /**
     * Custom query method overriding the super class method
     */
    @Override
    public void query() throws Exception
    {
        m_zTaskLogger.debug("Entering GETNXPDFDatabaseOperation.query method ...");

        this.primaryObj = null;
        this.secondaryObj = null;

        ModelObject[] primObjects = ((DispatcherRequest)request).get_primaryObjects();
        if (primObjects != null && primObjects.length > 0)
        {
            this.primaryObj = primObjects[0];
        }
        ModelObject[] secObjects = ((DispatcherRequest)request).get_secondaryObjects();
        if (secObjects != null && secObjects.length > 0)
        {
            this.secondaryObj = secObjects[0];
        }

        if (this.primaryObj == null)
        {
            throw new Exception("Primary Object is not set.");
        }
        if (this.secondaryObj == null)
        {
            throw new Exception("Secondary Object is not set.");
        }

        m_zTaskLogger.debug("Exiting GETNXPDFDatabaseOperation.query method ...");
    }
    
    /**
     * Method to change ownership of the generated 3D PDF dataset from dcproxy to Owner of the CAD
     * @throws Exception 
     */
    private void changeDatasetOwnership(Dataset dataset) throws Exception
    {
        m_zTaskLogger.debug("Entering GETNXPDFDatabaseOperation.changeDatasetOwnership method ...");
        
        dataset = (Dataset)SoaHelper.getProperties(dataset, GETCommon.objectNameAttr);

        DataManagementService dmService = DataManagementService.getService(SoaHelper.getSoaConnection());
        //ItemRevision sourceRevision = (ItemRevision) secondaryObj;
        Dataset caddataset = (Dataset)primaryObj;
        User user = (User) caddataset.get_owning_user();
        Group userGroup = (Group) caddataset.get_owning_group();
        
        ObjectOwner[] ownerData = new ObjectOwner[1];
        ObjectOwner ownerObj = new ObjectOwner();
        
        ownerObj.object = dataset;
        ownerObj.owner = (User) user;
        ownerObj.group = (Group) userGroup;
        ownerData[0] = ownerObj;
        //Change Ownership
        ServiceData returnData = dmService.changeOwnership(ownerData);
        
        if(returnData.sizeOfPartialErrors()>0)
        {
            String errorMessage = GETCommon.getErrorFromServiceData(returnData);
            if (errorMessage != null)
            {
                this.m_zTaskLogger.info(errorMessage);
            }
        }
        else
        {
            m_zTaskLogger.info("Dataset Ownership change successful");
        }
    }
    
    public static <T> List<T> castList(Class<? extends T> clas, Collection<?> col) {
        List<T> ret = new ArrayList<T>(col.size());
        for(Object obj: col)
          ret.add(clas.cast(obj));
        return ret;
    }
}