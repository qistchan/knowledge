
/**
 * @file  TEST_GET_Item.cxx
 * @brief Unit test framework for item class
 */

#if _MSC_VER == 1700
#define _VARIADIC_MAX 10
#endif

#include <stdlib.h>
#include <iostream>

#include <gtest/gtest.h>

#include <fclasses/tc_basic.h>
#include <tc/tc.h>
#include <tccore/item.h>

#include <GET_cpp_stl.h>
#include <GET_Exception.hxx>
#include <GET_TC_Logger.hxx>

#include <base_utils/ResultCheck.hxx>
#include <base_utils/IFail.hxx>
//#include <GET_Site.hxx>
//#include <GET_POM_object.hxx>

const string logger = "get_tc_common.test.TEST_GET_HTML_GEN";
using namespace get;

class TEST_GET_HTML_GEN: public ::testing::Test {


	virtual void TearDown() {

		}

};

struct propNameAndValues
{
	string sPropName;
	string sPropValue;
	propNameAndValues( const string& sPropName, const string& sPropValue ): sPropName( sPropName ), sPropValue( sPropValue ) {}
};

int main(int argc, char **argv) {
	ITK_init_from_cpp(argc, argv);
	ITK_initialize_text_services(0);
	ResultCheck stat = ITK_auto_login();

	::testing::InitGoogleTest(&argc, argv);
	cout << "\ntesting started.....\n";

	try
	{

		//values for sTopPortion_Config , sFirstSecion_Config and sSecondSection_Config
		string sCNId = "CN-Y2K121401P1";
		string sCOId =  "CO-175374";
		string sDwgTitle = "MODEL TEST";
		string sCNStatus = "Submitted";
		string sCNRevision = "0";

		//Names(labels) used in in sTopPortion_Config, first and second config
		string sChangeObjectName = "Change Notice";
		string sChangeOrderShort = "CO";

		//Names(labels) used in in sSecondSection_Config
		string sDrawgTitleName = "Drawing Title";
		string sChangeObjectShort = "CN";
		string sChangeObjectStatus = "CN Status";

		//fourth section
		string sReasonForChange = "NEW DRAWING";


		//fourth section propnames or labels
		string sReasonForChngName = "Reason for Change";

		//fifth section
		string sNCCodeStatus = "";
		string sNCDistributionList = "";

		//fifth scetion propNamees or Labels
		string sNCCodeStatusName = "NC Code Affected";
		string sNCDistributionListName = "NC Distribution List";

		//sixth section
		string sAppliedPractice = "New Drawing";

		//sixth section propNamees or Labels
		string sAppliedPracticeName = "Applied Practice";

		//sixth section propNamees or Labels
		string sDwgChgDetailsName = "Drawing Change Details";

		//seventh section
		string sDwgChgDetails = "-";

		vector<propNameAndValues> vSecSection;

		vSecSection.push_back( propNameAndValues ( "Prepared by", "Augustyniak, Timothy" ) );
		vSecSection.push_back( propNameAndValues ( "Phone #", "2662" ) );
		vSecSection.push_back( propNameAndValues ( "Date", "May 11, 2016" ) );
		vSecSection.push_back( propNameAndValues ( "Approved by", "Augustyniak, Timothy" ) );
		vSecSection.push_back( propNameAndValues ( "Phone #", "2662" ) );
		vSecSection.push_back( propNameAndValues ( "Date", "" ) );
		vSecSection.push_back( propNameAndValues ( "Customer(s)", "Test" ) );
		vSecSection.push_back( propNameAndValues ( "Add'l Business", "None" ) );
		vSecSection.push_back( propNameAndValues ( "GEMCCAS", "N" ) );
		vSecSection.push_back( propNameAndValues ( "Apparatus", "test" ) );
		vSecSection.push_back( propNameAndValues ( "Charge #", "16MBE" ) );
		vSecSection.push_back( propNameAndValues ( "Next Assy Dwg #", "" ) );
		vSecSection.push_back( propNameAndValues ( "Charge #", "75PDT" ) );
		vSecSection.push_back( propNameAndValues ( "Reason Code", "1A" ) );
		vSecSection.push_back( propNameAndValues ( "PO(s)", "" ) );
		vSecSection.push_back( propNameAndValues ( "ECN #", "" ) );



		ofstream configFile;

		configFile.open ("C:\\Users\\195821\\Programs\\HTML_creation\\gen_config_report.html");

		configFile << "<!DOCTYPE html>\n<html>\n<head>\n</head>\n<body>\n";

		string slineAsSeperator = "<hr WIDTH=100% >\n";

		string sTopPortion_Config = "******This is autogenerated Mail. Please do not reply to this******\n<br><br><b>\nPlease Review the " + sChangeObjectName + " " +
									sCNId + "&nbspfor&nbsp" + sChangeOrderShort + "&nbsp#&nbsp" + sCOId + "\n<br><br></b>";

		string sFirstSecion_Config = "<html><head><title>" + sChangeObjectName + "Report for " + sCNId + "</title></head>\n<body bgcolor=\"#FFFFFF\">\n" +
									 sTopPortion_Config + "<br><br><hr><br>" + "<b><i><font size=+2><span style=\"text-transform: uppercase\">" +
									 sChangeObjectName +"</font></i></b><br>\n";

		string sSecondSection_Config = "<hr><table BORDER=0 cellpadding=0 cellspacing=0 WIDTH=\"100%\">\n" + string("<tr>\n") + "<td>" + sChangeOrderShort +
									   "&nbsp#:&nbsp;<b>" + sCOId + "</b></td>" + "<td><b>" + sDrawgTitleName + "</b>:&nbsp;" + sDwgTitle + "</td>" + "<td>" +
									   sChangeObjectShort + "&nbsp#:&nbsp;<b>" + sCNId + " - " + sCNRevision + "</b></td>" + "\n</tr>\n<tr>\n" + "<td></td>" +
									   "<td></td><td>" + sChangeObjectStatus + ":&nbsp;<b>" + sCNStatus + "</b></td>" + "\n</tr>\n</table>\n";


		string sThirdSection_Config = "<table BORDER=0 cellpadding=2 cellspacing=0 WIDTH=\"100%\"><tr>";


		int iNoOfColumns = 0;
		cout << "vSecSection contains " << vSecSection.size() << " elements.\n";
		for ( vector<propNameAndValues>::iterator it = vSecSection.begin(); it!=vSecSection.end(); ++it)
		{
			sThirdSection_Config = sThirdSection_Config + "<td valign=top align=left ><b>" + (*it).sPropName + ":" + "</b></td>";
			sThirdSection_Config = sThirdSection_Config + "<td valign=top> " + (*it).sPropValue + "</td>";
			iNoOfColumns = iNoOfColumns+2;

			if ( iNoOfColumns == 6 )
			{
				 sThirdSection_Config = sThirdSection_Config + "</tr>\n<tr>";
				 iNoOfColumns = 0;
			}
		}

		sThirdSection_Config = sThirdSection_Config +  "</tr>" + "</table>\n";

		string sFourthSection_Config = "<table BORDER=0 cellpadding=0 cellspacing=0 WIDTH=\"100%\">" + string("<tr>")+
									   "<td valign=top align=left WIDTH=\"145\"><b>" + sReasonForChngName + ":</b></td></tr>\n" +
									   "<tr><td valign=top align=left><font face=\"monospace\" size=2>" + sReasonForChange + "</font></td>" +
									   "</tr>" + "</table>\n";

		string sFiftthSection_Config = string("</table>") + "<b>" + sNCCodeStatusName + ":</b>"+ sNCCodeStatus + "<br><b>" + sNCDistributionListName + ":</b>"+
									   sNCDistributionList + "<br>";

		string sSixthSection_Config = "<table  BORDER=0 cellpadding=0 cellspacing=0 WIDTH=\"100%\">" + string ( "<tr><td valign=top align=left ><b>" + sAppliedPracticeName + ":</b></td></tr>" ) +
									  "<tr><td valign=top align=left><font face=\"monospace\" size=2>" + sAppliedPractice + "</font></td></tr>" + "</table>";

		string sSeventhSection_Config = "<table  BORDER=0 cellpadding=0 cellspacing=0 WIDTH=\"100%\">" + string ( "<tr><td valign=top align=left ><b>" ) + sDwgChgDetailsName + ":</b></td></tr>" +
										 "<tr><td valign=top align=left><font face=\"monospace\" size=2>" + sDwgChgDetails + "</font></td></tr>" + "</table>";


		configFile << sFirstSecion_Config;
		configFile << sSecondSection_Config;
		configFile << slineAsSeperator;
		configFile << sThirdSection_Config;
		configFile << sFourthSection_Config;
		configFile << sFiftthSection_Config;
		configFile << slineAsSeperator;
		configFile << sSixthSection_Config;
		configFile << slineAsSeperator;
		configFile << sSeventhSection_Config;

		//ending html
		configFile << "</body>\n</html>";
		configFile.close();

	}
	catch ( const IFail &ex )
	{
        cout<<endl<<"TC Exception !!! "<<ex.getMessage().c_str()<<endl;
	}
	catch ( GET_Exception *ex )
	{
	    cout<<endl<<"GET Exception !!! "<<ex->getErrorMessage().c_str()<<endl;
	}
	catch ( ... )
	{
	    cout<<endl<<"Unexpected Exception ..."<<endl;
	}

	cout << "\ntesting end.....\n";
	ITK_exit_module(TRUE);

	return ITK_ok;
}

