#===================================================================================================
# File description: This file contains the Dispatcher Client configuration
#
# Filename: Service.properties
#

import TSBasicService,TSCatiaService,TSProEService,TSUGNXService,TSProjectTransService,TSEcadpcbService,TSTcJtService,TSSimProcessService,TSNXRefileService,TSAsyncService,TSFMSService,TSQSearchServices,TSRenderMgtTranslatorService,TSPublishBatchService,TSSimpGenService,TSVisGenService,TSQuickLaunchService,TSPlmXmlService,TSDataReplicationService,TSUpdateProductViewsService,TS3DPDFTransService,TSGenerateMesWIRepFilesService,TSContMgmtPublishService,TSSubsCmplValidationService,TSExpressTransService,TSMSDExchangeService,TSSendDXDataToSupplierService,TSReqHTMLGenerationService,TSImageCompressionService,TSReqService

###############################################################################
#
#    Tc.Host
#      The hostname where the Dispatcher Client tcserver processes will run.
#      For a two-tier installation, this could be localhost.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.Tc.Host=<computer name where tcserver processes will run>
#
Service.Tc.Host=localhost

#
#    Tc.Marker
#      The Teamcenter database to log into. This string corresponds to the
#      to the server name of the database.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.Tc.Marker=<the Teamcenter database marker>
#
Service.Tc.Marker=tc_DispatcherClient

#
#    Tc.User
#      The Teamcenter user that Dispatcher Client will log in as. Also referred to
#      as the DC Proxy User. The DC Proxy User should not be the installation
#      administrative user (e.g infodba) since at least one access rule will be
#      added specifically for the DC Proxy User.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.Tc.User=<DC proxy user ID>
#
Service.Tc.User=dcproxy


#
#    Tc.Group
#      The Teamcenter group to log in as. This must be the dba group. The
#      TS Proxy User must be a member of the dba group.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.Tc.Group=dba
#
Service.Tc.Group=dba

#
#    Tc.Port
#      Unique Port assigned that can be used to communicate with it's tcserver process.
#
#        Service.Tc.Port=<port number>
#
Service.Tc.Port=11200

#
#    Tc.ReLoginInterval
#      If this property is specified, the services will log out and re-login to
#      the Teamcenter database. The value of this property specifies how often,
#      in minutes, the relogin will occur.  This will shutdown the tcserver
#      process, freeing up memory used by cached objects.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.Tc.ReLoginInterval=<relogin interval in minutes>
#
#      The relogin interval value MUST NOT be less than the translation request
#      cleanup interval values described below.
#
Service.Tc.ReLoginInterval=1440

#
#    DataSetOwner
#      Specify owner of visualization datasets. The accepted values are DC or
#      CAD. DC specifies that the owner of visualization datasets created by
#      DispatcherClient will be the DC Proxy User. CAD specifies that the owner
#      of visualization datasets created by DC will be the same as the owner
#      of the corresponding translation source datasets.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.DataSetOwner=<DC | CAD>
#
Service.DataSetOwner=CAD

#
#    StoreJTFilesInSourceVol
#      Specifies that visualization data files for a source dataset will be
#      stored in the same volume as the associated source dataset data files.
#      The default value is true. If the value of this property is set to
#      false, visualization data files will be stored in the TS Proxy User
#      default volume.
#
#      The TS Proxy User MUST be granted access to all volumes where source
#      dataset data files are stored unless the value of this property is false.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.StoreJTFilesInSourceVol=<true | false>
#
Service.StoreJTFilesInSourceVol=TRUE


#
#    UpdateExistingVisualizationData
#      Specifies that the Dispatcher Client should update existing visualization
#      data for subsequent translations of the same version. The original translated
#      data is preserved by the default value of false. Update of visualization
#      data is enabled by changing the value of this property to true.
#
#      This property must be specified such that it applies to all Services.
#
#        Service.UpdateExistingVisualizationData=<true | false>
#
Service.UpdateExistingVisualizationData=FALSE


#
#    PollingInterval
#      When a service finds no translation requests to process in the database
#      or has completed processing of all translation requests returned from a
#      query, it goes to sleep before trying the query again. This property
#      specifies in seconds how long the process should sleep between queries.
#
#        Service.PollingInterval=<polling interval in seconds>
#
Service.PollingInterval=60


#
#    CheckForDuplicateRequests
#      Boolean value which specifies whether validation processing should reject
#      duplicate translation requests. The default is true. A duplicate
#      translation request is a translation request whose primary objects are
#      already on one or more translation requests in an in-process state with
#      the same translator provider and translator name. If a translation
#      request is a duplicate, it will be put in the DUPLICATE state and will
#      not be translated. The DUPLICATE translation request state is a
#      successful end state.
#
#        Service.CheckForDuplicateRequests=<true | false>
#
Service.CheckForDuplicateRequests=true

#
#    RequestCleanup
#      RequestCleanup allows for automatic cleanup of completed translation
#      request objects in the database, Staging directory and the logs. It is possible
#      to automatically delete translation requests in both successful
#      (i.e. CANCELLED, COMPLETE, DELETE, DUPLICATE, SUPERSEDED, and NO_TRANS) and
#      un-successful (i.e. TERMINAL) states. RequestCleanup includes removal of any
#      remaining translation request task staging location and contents.
#
#      There are a total of 6 RequestCleanup properties. An example set of
#      property values is shown below.
#
#      The Interval properties specify, in minutes, how often to query for and
#      delete translation request objects. If the interval value is set to zero,
#      translation request cleanup will not be run.
#
#      The Threshold properties specify, in minutes, the amount of time that
#      must have passed since a translation request was last modified before it
#      can be deleted.
#
#      The DeleteLogs properties specifies if the task logs associated with the  
#      request being cleaned up should be deleted. True will delete the logs
#      and false will not delete the logs. 
#
#      The example Successful settings below specify that deletion of successful
#      translation requests will occur every 5 minutes and that those
#      translation requests last modified more than 5 minutes in the past will
#      be deleted. Task logs will be deleted.
#
#      The example UnSuccessful settings below specify that deletion of
#      unsuccessful translation requests will occur every two hours and that
#      those translation requests last modified more than 3 days in the past
#      will be deleted. Task logs will be deleted.
#
Service.RequestCleanup.Successful.Interval=60

Service.RequestCleanup.Successful.Threshold=480

Service.RequestCleanup.Successful.DeleteLogs=true
Service.RequestCleanup.UnSuccessful.Interval=120

Service.RequestCleanup.UnSuccessful.Threshold=2880

Service.RequestCleanup.UnSuccessful.DeleteLogs=true

#
#    Tc.ConnectDelay
#      The Teamcenter server connection wait time between retries in seconds.
#
#      The default value is 1 second if not specified.
#
#        Service.Tc.ConnectDelay=1
#
Service.Tc.ConnectDelay=1

#
#    AssignedFsc
#      FMS operates in two different modes.
#        1. Clientmap Mode - In clientmap mode, the client determines its FSC data 
#           connections from the clientmap elements configured in the fmsmaster.xml file.
#           If this property has no value DispatcherClient uses the Clientmap mode.
#        2. Assigned Mode - In assigned mode, DispatcherClient is configured with FSC 
#           data connections that override the clientmap. These are comma separated values.
#           Example: http://123.456.1.1:1234,http://123.679.1.2:1234
#
#      The default is no value which is Clientmap mode.
#
#        Service.AssignedFsc=
#
Service.AssignedFsc=

#
#    Single Sign-On Login Service URL
#      If Teamcenter Security Services single sign-on (SSO) is enabled for your server, 
#      the username and password are authenticated externally through SSO rather than 
#      being authenticated against the Teamcenter database. 
#      This property is the URL used to connect to the SSO Login service.
#
#      The default is no value which means not in SSO enabled mode.
#
#        Service.Tc.SSOUrl=
#
Service.Tc.SSOUrl=

#
#    Single Sign-On Application Id
#      Application ID is a predefined string that serves to identify DispatcherClient
#      to TcSS. TcSS needs the identity of DispatcherClient so that it knows
#      that the SSO tokens it issues are going to bonafide service, so that it can 
#      properly alias userIDs when so configured.
#
#      This property has to be set if Service.Tc.SSOUrl is set. This value should match 
#      with the AppId specified in the TcSS Identity Service App Registry table.
#
#        Service.Tc.SSOAppId=
#
Service.Tc.SSOAppId=

##############################################################################
#
#     E - M A I L
#
#  The following are the recognized Dispatcher Client e-mail properties:

#
# Name          : Service.Email.AdminEmailId
# Description   : Adminstrator e-mail addresses to receive notification.
#                 specified e-mail inbox
# Value         : One or more valid, comma delimited, e-mail addresses. If a
#                 different address delimiter must be used, it must be specified
#                 as the Service.Email.AdminEmailIdDelimiter property value.
#
Service.Email.AdminEmailId=dcproxy@ge.com

#
# Name          : Service.Email.AdminEmailIdDelimiter
# Description   : The delimiter used for AdminEmailId property value.
# Value         : A valid delimiter character
# Default value : ,
#
Service.Email.AdminEmailIdDelimiter=,

#
# Name          : Service.Email.SMTPServerName
# Description   : Server used for basic text messaging
# Value         : A valid IP address of the SMTP Server
#
Service.Email.SMTPServerName=po.ae.ge.com

#
# Name          : Service.Email.SendUserEmailOnError
# Description   : 0 = off
#                 1 = Turn on e-mail based notification for Teamcenter users
#                     that create translation requests. When a translation
#                     error occurs, e-mail will be sent to the e-mail address
#                     specified for the user that owns the translation
#                     request.
# Value         : 0 or 1
#
Service.Email.SendUserEmailOnError=1

#
# Name          : Service.Email.SenderId
# Description   : All adminstrator and user error notifications sent via e-mail
#                 will use this value as the e-mail sender address.
# Value         : A single valid e-mail address.
# Default value : The Dispatcher Client name.
#
Service.Email.SenderId=dcproxy@ge.com

#
# Name          : Service.Email.EmailSubjectPrefix
# Description   : This set of characters is prepended to the subject
#                 of the e-mail
# Value         : String
#
Service.Email.EmailSubjectPrefix=[TS_ERROR]

###############################################################################
#
#     F I L T E R S
#
# Specifies a comma separated list of filters to apply to translation requests
# for a Dispatcher Client. If filters are specified for a service, a translation
# request found in the database must pass all filters specified, or the
# translation request will not be processed by the service.
#
# Filters have properties specified for that filter which are specified as
# service properties and apply the standard behavior of using the most specific
# setting. Filter properties are specified by using <filter name>.<filter property>.
# For example, given the following:
#
#        Service.Filters=TranslatorFilter
#        Service.TranslatorFilter.Provider=SIEMENS,SIEMENS
#        Service.TranslatorFilter.Translator=nxtopvdirect,nxtocgmdirect
#
# in the example the services will apply the TranslatorFilter and only process translation
# requests intended for the SIEMENS nxtopvdirect and SIEMENS nxtocgmdirect translator.
#
Service.Filters=

# The Filter.<filter name> properties in this section tie a filter name
# to the class that implements that filter.
#
# If a custom filter is created, name it and specify the new class here.

#
# Name               : TranslatorFilter
# Required Properties: Provider, Translator
# Optional Properties: none
# Description        : Filters out all translation requests without one of the
#                      specified Provider/Translator name pairs. Provider and
#                      Translator properties are specified as a comma delimited
#                      list of names with positional correspondence between the
#                      two properties. For example, to specify that translation
#                      requests for either the SIEMENS ideastojt translator or the
#                      Theorem catiatojt translator should not be filtered for
#                      a service instance, set the TranslatorFilter Provider
#                      and Translator properties as
#
#                      Service.TranslatorFilter.Provider=SIEMENS,Theorem
#                      Service.TranslatorFilter.Translator=ideastojt,catiatojt
#
Filter.TranslatorFilter=com.teamcenter.ets.request.TranslatorFilter

#
# Name               : PriorityFilter
# Required Properties: Priority
# Optional Properties: none
# Description        : Filters out all translation requests which have a
#                      priority lower than the specified priority.
#
Filter.PriorityFilter=com.teamcenter.ets.request.PriorityFilter

#
# Name               : OwningUserFilter
# Required Properties: OwningUser
# Optional Properties: none
# Description        : Filters out all translation requests which have an
#                      owning user name that does not match the specified
#                      owning user name.
#
Filter.OwningUserFilter=com.teamcenter.ets.request.OwningUserFilter

#
# Name               : LocallyOwnedSiteFilter
# Required Properties: none
# Optional Properties: none
# Description        : Filter to process translation requests only if the 
#                      primary and secondary objects are owned by the local 
#                      site.
#
Filter.LocallyOwnedSiteFilter=com.teamcenter.ets.request.LocallyOwnedSiteFilter

###############################################################################
#
#     T R A N S L A T O R S
#
# Certain stages in the translation process require actions specific to the
# data being translated and/or the translator being invoked. This section
# specifies the Java classes that perform these actions.
#
# Three classes can be specified for each translator. These classes are:
#
#  Prepare -  The Prepare class is used by the Extractor to extract
#             the specific source data from the Teamcenter database and
#             volumes which will be provided to the translator.
#
#  FileMap -  The file mapper class is used by the Loader to match up the
#             files produced by the translator to the source data.
#
#             Direct translators such as SIEMENS.ugtopvdirect store translation
#             results directly in Tc. For these translators, no FileMap
#             class is specified. The FileMapper class needs to be configured
#             in the PostProcessor.xml file.
#
#  Load    -  The load class is used by the Loader to commit the results
#             of the translation to the Teamcenter database and store
#             corresponding result files in a Teamcenter volume.
#
#             Direct translators such as SIEMENS.ugtopvdirect store translation
#             results directly in Teamcenter. For these translators, no Load
#             class is specified.
#
#  Translator.<provider name>.<translator name>.Prepare=
#  Translator.<provider name>.<translator name>.Load=
#
# Additional translator specific properties that can be set are
#  Duplicate       - Users can define translator specific duplicate check. If not set
#                    Service.CheckForDuplicateRequests property value will be used.
#                    Translator specific duplicate check helps to overide the default
#                    Service.CheckForDuplicateRequests property.
#                    Example - Translator.<provider name>.<translator name>.Duplicate=false
#
#  Log             - Log files can be attached to the Dispatcher Request. This property 
#                    takes comma delimited log file names to attach. If file names are 
#                    specified Dispatcher Client will search the result director for the 
#                    specified files and attach them. By default no value is specified,
#                    in this case <provider name>_<translator name>.log file will
#                    be searched in the result directory and attached. 
#                    Example - Translator.<provider name>.<translator name>.Log
#
#  LogsForComplete - Attach log files to the request in case the translation is successful.
#                    Default is set to false, which means no logs will be attached for 
#                    successful states. 
#                    Example - Translator.<provider name>.<translator name>.LogsForComplete
#
#    where <provider name> and <translator name> are the exact values placed in
#    the "provider_name" and "translator_name" attributes of the DispatcherRequest
#    object in the database. These values are defined in the Module 
#    configuration file translator.xml, as the provider and service attribute 
#    values associated with each translator.
#

# Custom class to invoke methods which need to be called during DispatcherClient startup.
# This class needs to implement "init" method defined in com.teamcenter.ets.ServiceInit class.
Service.InitClass=

###############################################################################
#
# TranslatorMode - This mode is deprecated in Tc10.1 and will be removed in Tc12 releases.
#   Use Multiple DispatcherClient installations as an alternative to TranslatorMode.
#
# DispatcherClient can also work in an optional Translator Mode. If installed in 
# this mode there will be a main DispatcherClient which manages the requests and
# submits requests to DispatcherServer. There will be another DispatcherClient 
# in TranslatorMode on the Module machine. The DispatcherClient in TranslatorMode 
# will do the extract and load operations. The Module will have a preprocess which 
# is extract, the main process is the translator and load is the postprocess operation.
# Steps to convert a given translator into Translator Mode setup are
# 1. Configure the Translator to work with the normal DispatcherClient.
# 2. Change the property key defining the TaskPrep and DatabaseOperation class. 
#    The key for Translator Mode is TranslatorMode.<Provider>.<TranslatorName>.Prepare and 
#    TranslatorMode.<Provider>.<TranslatorName>.Load 
#    Ex: TranslatorMode.SIEMENS.tozipfile.Prepare=com.teamcenter.ets.translator.ugs.basic.TaskPrep
#        TranslatorMode.SIEMENS.tozipfile.Load=com.teamcenter.ets.translator.ugs.basic.DatabaseOperation
#    If adding these properties to Service.properties make sure Translator.<Provider>.<TranslatorName>.prepare 
#    and Translator.<Provider>.<TranslatorName>.Load are not defined using the "import" property 
#    as a normal mode of translation.
# 3. Copy the DispatcherClient directory to Module/Translators directory.
# 4. Edit Module/Translators/DispatcherClient/conf/Service.properties file to specify 
#    comma separated list or port range for Service.Tc.Port. Ex: 
#    2099,3001,3003,3005 - Unused ports provided as comma separated list or 
#    2099-3099 - Any unused port between 2099 and 3099 will be used.
# 5. Edit Module/Translators/DispatcherClient/conf/DispatcherClient.config file to 
#    specify comma separated list or port range for Port. Ex: As shown above
# 6. Start DispatcherClient in translator mode from Module/Translators/DispatcherClient/bin 
#    directory with following command 
#      runDispatcherClient.bat/sh -translate start -n N 
#         Where N is any number of DispatcherClients to start in translator mode
#    To stop all services in translator mode 
#      runDispatcherClient.sh -translate stopall
# 7. Activate extractor and loader service by setting isactive="true" in Module/conf/translator.xml 
#    Add the extractor and loader as preprocessor and postprocessor to  the translator tag in translator.xml 
#    <Preprocess provider="SIEMENS" service="extractor"/>
#    <Postprocess provider="SIEMENS" service="loader"/>
# 8. Start Dispatcher Scheduler, Dispatcher Modules and "normal" Dispatcher Client in the order specified 
#    and submit requests. 
#-----------------------------------------------
#Translator.SIEMENS.bomsearchreplaceservice.Prepare=com.teamcenter.ets.translator.ugs.basic.TaskPrep
#Translator.SIEMENS.bomsearchreplaceservice.Load=com.teamcenter.ets.translator.ugs.basic.DatabaseOperation

Translator.SIEMENS.previewservice.Prepare=com.teamcenter.ets.translator.ugs.basic.TaskPrep
Translator.SIEMENS.previewservice.Load=com.teamcenter.ets.translator.ugs.basic.DatabaseOperation

Translator.GE.get6DrsPush.Prepare=com.ge.get6DrsPush.GETTaskPrep
Translator.GE.get6DrsPush.Load=com.ge.get6DrsPush.GETDBOperation

Translator.GE.get6BctPush.Prepare=com.ge.get6BctPush.GETTaskPrep
Translator.GE.get6BctPush.Load=com.ge.get6BctPush.GETDBOperation

Translator.GE.get6DxfPush.Prepare=com.ge.get6DxfPush.GETTaskPrep
Translator.GE.get6DxfPush.Load=com.ge.get6DxfPush.GETDBOperation

Translator.GE.get6BomIndex.Prepare=com.ge.get6BomIndex.GETTaskPrep
Translator.GE.get6BomIndex.Load=com.ge.get6BomIndex.GETDBOperation

Translator.GE.getpreviewservice.Prepare=com.teamcenter.ets.translator.ugs.basic.TaskPrep
Translator.GE.getpreviewservice.Load=com.ge.getpreviewservice.GETPreviewServiceDBOperation

Translator.GE.nxtopvdirect.Prepare=com.teamcenter.ets.translator.ugs.ugtopv.TaskPrep
Translator.GE.nxtopvdirect.Load=com.ge.getnxtopvdirect.GETNXToPVDirectDBOperation

#<!-- For 3D PDF generation -->
Translator.GE.get6NXPDF.Prepare=com.ge.get6NXPDF.GETNXPDFTaskPrep
Translator.GE.get6NXPDF.Load=com.ge.get6NXPDF.GETNXPDFDatabaseOperation
#<!-- For 3D PDF generation using ug_export -->
Translator.GE.get6UGEXPDF.Prepare=com.ge.get6UGEXPDF.GETUGEXPDFTaskPrep
Translator.GE.get6UGEXPDF.Load=com.ge.get6UGEXPDF.GETUGEXPDFDatabaseOperation